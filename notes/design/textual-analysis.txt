
=================================================
Concept Analysis
=================================================

C. Compiler:
  - Its a command line utility that produces an output file based on a input file.
    - Programming Language Compilers.
    - Assemblers.
    - File Format Converters.
    - Etc.
    - Geometry Generators.
    - Image Generators.
    - Compressors.

G. Generator:
  - It's a command line utility that produces an output file based on command line parameters
    - Mathematical - Table generators
    
L. Linker:
  - It's a command line utility that produces an output file based on one or many input files
    - Programming Language Linkers
    - Librarians
    - Archivers/Packers

1. Project:
	- It's the main entity in the build description file.
	- Has a collection of many sub-projects, targets, tasks, and configurations.
	
2. Target:
	- Is a software artifact that has to be explicity generated by the build manager.
	- Has a Name and a Version.
		- The Name is a Identifier-Like value.
		- The Version is a Semantic Versioning value [TODO: other versioning schemes? how they affect us?]
		- In Windows, the version must be embedded in the generated binary (EXE or DLL) via Windows Resources.
	- Has dependencies:
		- Those dependencies can be defined in the same project, or defined externally and imported.
			- When defined internally (locally), are specified in detail in the same project.
			- When defined externally:
				- Their definitions exists outside the project.
				- Their contents can be fetched from a path, a url or a repository.
				- Can be built as part of the project build proccess.
				- Can be pre-built and used directly in the project build proccess.
		- Can be run-time or build-time dependencies:
			- A run-time dependency is a Module that is necesary when the user is running the program or another run-time based library dependency.
			- A build-time dependency is a Module that is necesary when the developer are building the program or library.
	- Has a type:
		- program: The Target is a executable module.
		- library: The Target is a library that can be a dependency for another program or library.
		- pack: A file that holds another files. Suitable for packaging the assets for a Game.
		- documentation: A target that represents a generated documentation. 
			- An example is Doxygen-based documentation.
	- Is composed from many sources files.
		- They:
			- Can be Source Code files.
			- Can be Intermediate-Format (like XML files) used for generate other files source files during build-time.
			- Are used to transform images, sounds, and another resources from one format to another format more suitable for run-time performance.
		- Those source files can be transformed many times during the build proccess [need to find a way to express a artifact production pipeline clearly].
		- To map a source file on a target file we need a Compiler (AKA Compilers for source code files).
		- To reduce many target files into a target, we need a Reducer (AKA Linker for source code files).

3. Task:
	- Is a set of coordinated steps to acomplish some action.
	- They doesn't directly generate an artifact (Target must be used to directly generate an artifact).
	- Some default tasks are:
		- build: Build a set of targets.
		- clean: Clean all the intermediate objects generated for a build.
		- install: Installs all the targets to a pre-configured location.
		- configure: Detect available system-level, or project-level build toolchains (yes, custom toolchains can be defined directly in the project itself).
		- run: Runs an executable target.
			- When no executable is specified, the default executable is executed.
	- Tasks can be defined by the developer.
		- [TODO]: Define the custom task definition format-language, etc.
		
4. Configuration
	- Is a set of properties that drive the way different variations of the artifacts can be defined.
  - Those properties are of the kind of key:value.
	- By default, exists the Debug and Release configurations:
		- The Debug Configuration is a configuration suitable for development.
		- The Release Configuration is a configuration suitable for production/deployment.

5. Toolchains (can be emulated using conventional projects that export prexisting compilers)
	- A set of tools that map source files to target files.
	- In other words, Toolchains provides Compilers, Generators and/or Linkers.
	- Based on their physical location, can be System Toolchains or Project Toolchains
		- System Toolchains tipically contain Compilers, Linkers, Assemblers, Compressors, and another tools.
		- Project Toolchains are custom toolchains that converts from one format to another one.
			- A Project can invoke toolchains from another child toolchains.
			- Example project toolchain: A tool that generate a source code file for any physical file, for embeddeding it directly in the executable.
	- The BORC project can be built using many System Toolchains at the same time.
		- This is useful for a project targeting multiple platforms, like Desktop, Mobile and Web.
	- Many versions of the same toolchains, and different toolchains, may be used on a borc project simultaneously
	- The Supported Toolchains can be setted to the project at configuration time.
	- The Supported Toolchains can be added and removed to the project configuration at any time.
	
6. Templates.
	- A set of pre-constructed projects, targets, tasks, etc. for aiding the developer to put more value on their software projects.
	- A project template, for example, can be used to generate a starting point to create a complete application.
  - Implementation HINT: Use a template engine.
